// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id String @id @unique @default(uuid())
  name String
  email String @unique
  password String
  
  role userRoles @default(User)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client Clients[]
  reminders Reminders[]
  // interationLog InteractionLogs[]
  @@map("users")
}
model Clients {
  client_id String @id @unique @default(uuid())
  userId String
  name String
  email String 
  phone String
  company String?
  notes String?
  user User @relation(fields: [userId], references: [id])
  projects Projects[]
  reminders Reminders[]
  // interationLog InteractionLogs[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, email])
  @@map("clients")
}

model Projects {
  project_id String @id @unique @default(uuid())
  client_id String
  title String
  budget Float
  deadline DateTime
  status ProjectStatus
  // interationLog InteractionLogs[]
  client Clients @relation(fields: [client_id],references: [client_id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("projects")
}


// model InteractionLogs{
//   interaction_id String @id @unique @default(uuid())
//   date            DateTime
//   type            InteractionType  // Enum: 'CALL', 'MEETING', 'EMAIL', etc.
//   notes           String
//   projectId       String?     // if linked to a project
//   clientId        String?     // if linked directly to a client
//   createdByUserId String      // to track who added the log

//   project         Projects?    @relation(fields: [projectId], references: [project_id])
//   client          Clients?     @relation(fields: [clientId], references: [client_id])
//   User   User        @relation(fields: [createdByUserId], references: [id])


//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
 

// }
model Reminders {
  id          String   @id @unique @default(uuid())
  message     String   // What the reminder is about
  date        DateTime // When to be reminded
  userId      String   // Which user the reminder belongs to
  clientId   String?  // If it's related to a project
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])
 
  client      Clients?  @relation(fields: [clientId], references: [client_id])
}

// other can be added later
enum userRoles {
  User
  
 
}

enum ProjectStatus {
  DRAFT
  PROPOSAL_SENT
  NEGOTIATION
  IN_PROGRESS
  WAITING_ON_CLIENT
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum InteractionType {
  CALL 
  MEETING 
  EMAIL
}
